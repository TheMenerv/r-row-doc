"use strict";(self.webpackChunkr_row_doc=self.webpackChunkr_row_doc||[]).push([[4345],{3905:(e,t,l)=>{l.d(t,{Zo:()=>s,kt:()=>d});var n=l(7294);function r(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){r(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function c(e,t){if(null==e)return{};var l,n,r=function(e,t){if(null==e)return{};var l,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||(r[l]=e[l]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(r[l]=e[l])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},s=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var l=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=o(l),k=r,d=u["".concat(p,".").concat(k)]||u[k]||m[k]||i;return l?n.createElement(d,a(a({ref:t},s),{},{components:l})):n.createElement(d,a({ref:t},s))}));function d(e,t){var l=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=l.length,a=new Array(i);a[0]=k;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:r,a[1]=c;for(var o=2;o<i;o++)a[o]=l[o];return n.createElement.apply(null,a)}return n.createElement.apply(null,l)}k.displayName="MDXCreateElement"},3599:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var n=l(7462),r=(l(7294),l(3905));const i={id:"Circle",slug:"circle"},a=void 0,c={unversionedId:"class/primitives/Circle",id:"class/primitives/Circle",title:"Circle",description:"The Circle class represents a circle in 2D space.",source:"@site/docs/class/primitives/circle.md",sourceDirName:"class/primitives",slug:"/class/primitives/circle",permalink:"/r-row-doc/class/primitives/circle",draft:!1,tags:[],version:"current",frontMatter:{id:"Circle",slug:"circle"},sidebar:"tutorialSidebar",previous:{title:"Touch",permalink:"/r-row-doc/class/inputs/touch"},next:{title:"Line",permalink:"/r-row-doc/class/primitives/line"}},p={},o=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:2},{value:"setOptions",id:"setoptions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example",id:"example",level:4},{value:"toArray",id:"toarray",level:3},{value:"Return",id:"return-1",level:4},{value:"Example",id:"example-1",level:4},{value:"equals",id:"equals",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return",id:"return-2",level:4},{value:"Example",id:"example-2",level:4},{value:"isContainsPoint",id:"iscontainspoint",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Return",id:"return-3",level:4},{value:"Example",id:"example-3",level:4},{value:"isIntersectsWithCircle",id:"isintersectswithcircle",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Return",id:"return-4",level:4},{value:"Example",id:"example-4",level:4},{value:"isIntersectsWithLine",id:"isintersectswithline",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return",id:"return-5",level:4},{value:"Example",id:"example-5",level:4},{value:"getIntersectionsWithLine",id:"getintersectionswithline",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Return",id:"return-6",level:4},{value:"Example",id:"example-6",level:4},{value:"isIntersectsWithRectangle",id:"isintersectswithrectangle",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Return",id:"return-7",level:4},{value:"Example",id:"example-7",level:4},{value:"getIntersectionsWithRectangle",id:"getintersectionswithrectangle",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Return",id:"return-8",level:4},{value:"Example",id:"example-8",level:4},{value:"clone",id:"clone",level:3},{value:"Return",id:"return-9",level:4},{value:"Example",id:"example-9",level:4},{value:"draw",id:"draw",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Return",id:"return-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Static methods",id:"static-methods",level:2},{value:"fromArray",id:"fromarray",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Return",id:"return-11",level:4},{value:"Example",id:"example-11",level:4}],s={toc:o},u="wrapper";function m(e){let{components:t,...l}=e;return(0,r.kt)(u,(0,n.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Circle")," class represents a circle in 2D space."),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"constructor(position: Point, radius: number, options: CircleOptions = {});\n")),(0,r.kt)("h3",{id:"properties"},"Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"position")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")),(0,r.kt)("li",{parentName:"ul"},"The position of the circle (from the center)."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"radius")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},"The radius of the circle."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"options")," (optional)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"CircleOptions")),(0,r.kt)("li",{parentName:"ul"},"Default value: ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")),(0,r.kt)("li",{parentName:"ul"},"The options for the circle")))),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"setoptions"},"setOptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"setOptions(options: CircleOptions): Circle\n")),(0,r.kt)("p",null,"Set the options of the circle."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"CircleOptions")),(0,r.kt)("li",{parentName:"ul"},"The circle options.")))),(0,r.kt)("h4",{id:"return"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Circle")," The circle."),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\ncircle.setOptions({ fillColor: 'red', weight: 2, strokeColor: 'blue' });\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"toarray"},"toArray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"toArray(): [number, number, number]\n")),(0,r.kt)("p",null,"Converts a circle to an array."),(0,r.kt)("h4",{id:"return-1"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[number, number, number]")," Array with 3 numbers, the two first are the position of the circle and the third is the radius."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\nconst array = circle.toArray();\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"equals"},"equals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"equals(circle: Circle): boolean\n")),(0,r.kt)("p",null,"Checks if the circle is equal to another circle."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"circle"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Circle")),(0,r.kt)("li",{parentName:"ul"},"The circle to compare with")))),(0,r.kt)("h4",{id:"return-2"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the circles are equal."),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle1 = new Circle(new Point(10, 10), 10);\nconst circle2 = new Circle(new Point(10, 10), 10);\nconst circle3 = new Circle(new Point(10, 10), 20);\ncircle1.equals(circle2); // true\ncircle1.equals(circle3); // false\ncircle2.equals(circle3); // false\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"iscontainspoint"},"isContainsPoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isContainsPoint(point: Point): boolean\n")),(0,r.kt)("p",null,"Checks if the circle contains a point."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"point"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Point")),(0,r.kt)("li",{parentName:"ul"},"The point to check")))),(0,r.kt)("h4",{id:"return-3"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the circle contains the point."),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\ncircle.isContainsPoint(new Point(12, 12)); // true\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"isintersectswithcircle"},"isIntersectsWithCircle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithCircle(circle: Circle): boolean\n")),(0,r.kt)("p",null,"Checks if the circle intersects with another circle."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"circle"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Circle")),(0,r.kt)("li",{parentName:"ul"},"The circle to check.")))),(0,r.kt)("h4",{id:"return-4"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the circle intersects with the other circle."),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle1 = new Circle(new Point(10, 10), 10);\nconst circle2 = new Circle(new Point(10, 10), 10);\nconst circle3 = new Circle(new Point(10, 10), 20);\ncircle1.isIntersectsWithCircle(circle2); // true\ncircle1.isIntersectsWithCircle(circle3); // true\ncircle2.isIntersectsWithCircle(circle3); // true\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"isintersectswithline"},"isIntersectsWithLine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithLine(line: Line): boolean\n")),(0,r.kt)("p",null,"Check if the circle intersects with a line."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"line"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Line")),(0,r.kt)("li",{parentName:"ul"},"The line to check.")))),(0,r.kt)("h4",{id:"return-5"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the circle intersects with the line."),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\nconst line = new Line(new Point(0, 0), new Point(20, 20));\ncircle.isIntersectsWithLine(line); // true\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"getintersectionswithline"},"getIntersectionsWithLine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithLine(line: Line): Point[]\n")),(0,r.kt)("p",null,"Get the intersections with a line."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"line"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Line")),(0,r.kt)("li",{parentName:"ul"},"The line to get the intersections with.")))),(0,r.kt)("h4",{id:"return-6"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersections with the line."),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\nconst line = new Line(new Point(0, 0), new Point(20, 20));\nconst intersections = circle.getIntersectionsWithLine(line);\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"isintersectswithrectangle"},"isIntersectsWithRectangle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithRectangle(rectangle: Rectangle): boolean\n")),(0,r.kt)("p",null,"Get the intersections with a line."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,r.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,r.kt)("h4",{id:"return-7"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the circle intersects with the rectangle."),(0,r.kt)("h4",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\nconst rectangle = new Rectangle(new Point(0, 0), new Size(20, 20));\ncircle.isIntersectsWithRectangle(rectangle); // true\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"getintersectionswithrectangle"},"getIntersectionsWithRectangle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithRectangle(rectangle: Rectangle): Point[]\n")),(0,r.kt)("p",null,"Get the intersections with a line."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,r.kt)("li",{parentName:"ul"},"The rectangle to get the intersections with.")))),(0,r.kt)("h4",{id:"return-8"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersections with the rectangle."),(0,r.kt)("h4",{id:"example-8"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\nconst rectangle = new Rectangle(new Point(0, 0), new Size(20, 20));\nconst intersections = circle.getIntersectionsWithRectangle(rectangle);\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"clone"},"clone"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"clone(): Circle\n")),(0,r.kt)("p",null,"Get a copy of circle."),(0,r.kt)("h4",{id:"return-9"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Circle")," The copy."),(0,r.kt)("h4",{id:"example-9"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\nconst clonedCircle = circle.clone();\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"draw"},"draw"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"draw(ctx: CanvasRenderingContext2D): void\n")),(0,r.kt)("p",null,"Draw the circle."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ctx"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"CanvasRenderingContext2D")),(0,r.kt)("li",{parentName:"ul"},"The canvas context.")))),(0,r.kt)("h4",{id:"return-10"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"example-10"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = new Circle(new Point(10, 10), 10);\n//...\ncircle.draw(ctx);\n")),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"static-methods"},"Static methods"),(0,r.kt)("h3",{id:"fromarray"},"fromArray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"static fromArray(array: [number, number, number]): Circle\n")),(0,r.kt)("p",null,"Creates a circle from an array"),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"[number, number, number]")),(0,r.kt)("li",{parentName:"ul"},"Array with 3 numbers, the two first are the position of the circle and the third is the radius.")))),(0,r.kt)("h4",{id:"return-11"},"Return"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Circle")," The circle."),(0,r.kt)("h4",{id:"example-11"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const circle = Circle.fromArray([10, 10, 10]);\n")))}m.isMDXComponent=!0}}]);