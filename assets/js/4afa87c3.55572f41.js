"use strict";(self.webpackChunkr_row_doc=self.webpackChunkr_row_doc||[]).push([[3709],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=l.createContext({}),c=function(e){var t=l.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=c(e.components);return l.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(n),k=a,g=u["".concat(p,".").concat(k)]||u[k]||m[k]||i;return n?l.createElement(g,r(r({ref:t},s),{},{components:n})):l.createElement(g,r({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var l=n(7462),a=(n(7294),n(3905));const i={id:"Rectangle",slug:"rectangle"},r=void 0,o={unversionedId:"class/primitives/Rectangle",id:"class/primitives/Rectangle",title:"Rectangle",description:"The Rectangle class represents a Rectangle in 2D space.",source:"@site/docs/class/primitives/rectangle.md",sourceDirName:"class/primitives",slug:"/class/primitives/rectangle",permalink:"/r-row-doc/class/primitives/rectangle",draft:!1,tags:[],version:"current",frontMatter:{id:"Rectangle",slug:"rectangle"},sidebar:"tutorialSidebar",previous:{title:"Point",permalink:"/r-row-doc/class/primitives/point"},next:{title:"Button",permalink:"/r-row-doc/class/ui/button"}},p={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:3},{value:"Getters",id:"getters",level:2},{value:"top",id:"top",level:3},{value:"bottom",id:"bottom",level:3},{value:"left",id:"left",level:3},{value:"right",id:"right",level:3},{value:"topLeft",id:"topleft",level:3},{value:"topRight",id:"topright",level:3},{value:"bottomLeft",id:"bottomleft",level:3},{value:"bottomRight",id:"bottomright",level:3},{value:"topLine",id:"topline",level:3},{value:"rightLine",id:"rightline",level:3},{value:"bottomLine",id:"bottomline",level:3},{value:"leftLine",id:"leftline",level:3},{value:"Methods",id:"methods",level:2},{value:"setOptions",id:"setoptions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example",id:"example",level:4},{value:"toArray",id:"toarray",level:3},{value:"Return",id:"return-1",level:4},{value:"Example",id:"example-1",level:4},{value:"equals",id:"equals",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return",id:"return-2",level:4},{value:"Example",id:"example-2",level:4},{value:"isContainsPoint",id:"iscontainspoint",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Return",id:"return-3",level:4},{value:"Example",id:"example-3",level:4},{value:"isIntersectsWithRectangle",id:"isintersectswithrectangle",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Return",id:"return-4",level:4},{value:"Example",id:"example-4",level:4},{value:"getIntersectionsWithRectangle",id:"getintersectionswithrectangle",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return",id:"return-5",level:4},{value:"Example",id:"example-5",level:4},{value:"isIntersectsWithLine",id:"isintersectswithline",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Return",id:"return-6",level:4},{value:"Example",id:"example-6",level:4},{value:"getIntersectionsWithLine",id:"getintersectionswithline",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Return",id:"return-7",level:4},{value:"Example",id:"example-7",level:4},{value:"isIntersectsWithCircle",id:"isintersectswithcircle",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Return",id:"return-8",level:4},{value:"Example",id:"example-8",level:4},{value:"getIntersectionsWithCircle",id:"getintersectionswithcircle",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Return",id:"return-9",level:4},{value:"Example",id:"example-9",level:4},{value:"clone",id:"clone",level:3},{value:"Return",id:"return-10",level:4},{value:"Example",id:"example-10",level:4},{value:"draw",id:"draw",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Return",id:"return-11",level:4},{value:"Example",id:"example-11",level:4},{value:"Static methods",id:"static-methods",level:2},{value:"fromArray",id:"fromarray",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Return",id:"return-12",level:4},{value:"Example",id:"example-12",level:4}],s={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," class represents a Rectangle in 2D space."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"constructor(position: Point, size: Point, options: RectangleOptions = {})\n")),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"position")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The top left position of the rectangle."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"size")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The size of the rectangle."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"RectangleOptions")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")),(0,a.kt)("li",{parentName:"ul"},"The options for the rectangle.")))),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"getters"},"Getters"),(0,a.kt)("h3",{id:"top"},"top"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"The top position of the rectangle."),(0,a.kt)("h3",{id:"bottom"},"bottom"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"The bottom position of the rectangle."),(0,a.kt)("h3",{id:"left"},"left"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"The left position of the rectangle."),(0,a.kt)("h3",{id:"right"},"right"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"The right position of the rectangle."),(0,a.kt)("h3",{id:"topleft"},"topLeft"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point"))),(0,a.kt)("p",null,"The topLeft point of the rectangle."),(0,a.kt)("h3",{id:"topright"},"topRight"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point"))),(0,a.kt)("p",null,"The topRight point of the rectangle."),(0,a.kt)("h3",{id:"bottomleft"},"bottomLeft"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point"))),(0,a.kt)("p",null,"The bottomLeft point of the rectangle."),(0,a.kt)("h3",{id:"bottomright"},"bottomRight"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point"))),(0,a.kt)("p",null,"The bottomRight point of the rectangle."),(0,a.kt)("h3",{id:"topline"},"topLine"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line"))),(0,a.kt)("p",null,"The topLine line of the rectangle."),(0,a.kt)("h3",{id:"rightline"},"rightLine"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line"))),(0,a.kt)("p",null,"The rightLine line of the rectangle."),(0,a.kt)("h3",{id:"bottomline"},"bottomLine"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line"))),(0,a.kt)("p",null,"The bottomLine line of the rectangle."),(0,a.kt)("h3",{id:"leftline"},"leftLine"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line"))),(0,a.kt)("p",null,"The leftLine line of the rectangle."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"setoptions"},"setOptions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"setOptions(options: RectangleOptions): Circle\n")),(0,a.kt)("p",null,"Set the options of the rectangle."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"RectangleOptions")),(0,a.kt)("li",{parentName:"ul"},"The rectangle options.")))),(0,a.kt)("h4",{id:"return"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," The rectangle with the new options."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nrectangle.setOptions({ fillColor: 'red', weight: 2, strokeColor: 'blue', radius: 5 });\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"toarray"},"toArray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"toArray(): [number, number, number, number]\n")),(0,a.kt)("p",null,"Converts a rectangle to an array."),(0,a.kt)("h4",{id:"return-1"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[number, number, number, number]")," Array with 4 numbers, the two first are the top left position of the rectangle and the two remaining are the size of the line."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst array = rectangle.toArray();\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"equals"},"equals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"equals(rectangle: Rectangle): boolean\n")),(0,a.kt)("p",null,"Check if the rectangle is equal to another rectangle."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to compare.")))),(0,a.kt)("h4",{id:"return-2"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the rectangle are equal."),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle1 = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangle2 = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangle3 = new Rectangle(new Point(10, 20), new Point(10, 10));\nrectangle1.equals(rectangle2); // true\nrectangle1.equals(rectangle3); // false\nrectangle2.equals(rectangle3); // false\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"iscontainspoint"},"isContainsPoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isContainsPoint(point: Point, tolerance: number = 0.1): boolean\n")),(0,a.kt)("p",null,"Checks if the rectangle contains a point."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"point")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The point to check"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance to use")))),(0,a.kt)("h4",{id:"return-3"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the rectangle contains the point."),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst point1 = new Point(10, 10);\nconst point2 = new Point(20, 20);\nconst point3 = new Point(30, 30);\nrectangle.isContainsPoint(point1); // true\nrectangle.isContainsPoint(point2); // true\nrectangle.isContainsPoint(point3); // false\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isintersectswithrectangle"},"isIntersectsWithRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithRectangle(rectangle: Rectangle): boolean\n")),(0,a.kt)("p",null,"Check if the rectangle intersects with another rectangle."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-4"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the rectangle intersect."),(0,a.kt)("h4",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle1 = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangle2 = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangle3 = new Rectangle(new Point(10, 20), new Point(10, 10));\nrectangle1.isIntersectsWithRectangle(rectangle2); // true\nrectangle1.isIntersectsWithRectangle(rectangle3); // false\nrectangle2.isIntersectsWithRectangle(rectangle3); // false\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getintersectionswithrectangle"},"getIntersectionsWithRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithRectangle(rectangle: Rectangle): Point[]\n")),(0,a.kt)("p",null,"Get the intersection of the rectangle with another rectangle."),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-5"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersections."),(0,a.kt)("h4",{id:"example-5"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle1 = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangle2 = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangle3 = new Rectangle(new Point(10, 20), new Point(10, 10));\nrectangle1.getIntersectionWithRectangle(rectangle2); // [Point(10, 10), Point(20, 10), Point(20, 20), Point(10, 20)]\nrectangle1.getIntersectionWithRectangle(rectangle3); // []\nrectangle2.getIntersectionWithRectangle(rectangle3); // []\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isintersectswithline"},"isIntersectsWithLine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithLine(line: Line): boolean\n")),(0,a.kt)("p",null,"Check if the rectangle intersects with a line."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"line"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},"The line to check.")))),(0,a.kt)("h4",{id:"return-6"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the line intersects with the rectangle."),(0,a.kt)("h4",{id:"example-6"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst line1 = new Line(new Point(10, 10), new Point(20, 20));\nconst line2 = new Line(new Point(10, 20), new Point(20, 10));\nconst line3 = new Line(new Point(30, 30), new Point(40, 40));\nrectangle.isIntersectsWithLine(line1); // true\nrectangle.isIntersectsWithLine(line2); // true\nrectangle.isIntersectsWithLine(line3); // false\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getintersectionswithline"},"getIntersectionsWithLine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithLine(line: Line): Point[]\n")),(0,a.kt)("p",null,"Get the intersection of the rectangle with a line."),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"line"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},"The line to check.")))),(0,a.kt)("h4",{id:"return-7"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersection points."),(0,a.kt)("h4",{id:"example-7"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst line1 = new Line(new Point(10, 10), new Point(20, 20));\nconst line2 = new Line(new Point(10, 20), new Point(20, 10));\nconst line3 = new Line(new Point(30, 30), new Point(40, 40));\nrectangle.getIntersectionsWithLine(line1); // [Point(10, 10), Point(20, 20)]\nrectangle.getIntersectionsWithLine(line2); // [Point(10, 20), Point(20, 10)]\nrectangle.getIntersectionsWithLine(line3); // []\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isintersectswithcircle"},"isIntersectsWithCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithCircle(circle: Circle): boolean\n")),(0,a.kt)("p",null,"Check if the rectangle intersects with a circle."),(0,a.kt)("h4",{id:"parameters-7"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"circle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check.")))),(0,a.kt)("h4",{id:"return-8"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the circle is in the rectangle."),(0,a.kt)("h4",{id:"example-8"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst circle1 = new Circle(new Point(10, 10), 10);\nconst circle2 = new Circle(new Point(20, 20), 10);\nconst circle3 = new Circle(new Point(30, 30), 10);\nrectangle.isIntersectsWithCircle(circle1); // true\nrectangle.isIntersectsWithCircle(circle2); // true\nrectangle.isIntersectsWithCircle(circle3); // false\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getintersectionswithcircle"},"getIntersectionsWithCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithCircle(circle: Circle): Point[]\n")),(0,a.kt)("p",null,"Check if the line intersects with a circle."),(0,a.kt)("h4",{id:"parameters-8"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"circle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check.")))),(0,a.kt)("h4",{id:"return-9"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersection of the rectangle with a circle."),(0,a.kt)("h4",{id:"example-9"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst circle1 = new Circle(new Point(10, 10), 10);\nconst circle2 = new Circle(new Point(20, 20), 10);\nconst circle3 = new Circle(new Point(30, 30), 10);\nrectangle.getIntersectionsWithCircle(circle1); // [Point(10, 10), Point(20, 20)]\nrectangle.getIntersectionsWithCircle(circle2); // [Point(10, 20), Point(20, 10)]\nrectangle.getIntersectionsWithCircle(circle3); // []\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"clone"},"clone"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"clone(): Rectangle\n")),(0,a.kt)("p",null,"Get a copy of rectangle."),(0,a.kt)("h4",{id:"return-10"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," The copy."),(0,a.kt)("h4",{id:"example-10"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nconst rectangleClone = rectangle.Clone();\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"draw"},"draw"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"draw(ctx: CanvasRenderingContext2D): void\n")),(0,a.kt)("p",null,"Draw the Rectangle."),(0,a.kt)("h4",{id:"parameters-9"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctx"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"CanvasRenderingContext2D")),(0,a.kt)("li",{parentName:"ul"},"The canvas context.")))),(0,a.kt)("h4",{id:"return-11"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"void")),(0,a.kt)("h4",{id:"example-11"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = new Rectangle(new Point(10, 10), new Point(10, 10));\nrectangle.draw(ctx);\n")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"static-methods"},"Static methods"),(0,a.kt)("h3",{id:"fromarray"},"fromArray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"static fromArray(array: [number, number, number, number]): Rectangle\n")),(0,a.kt)("p",null,"Creates a rectangle from an array"),(0,a.kt)("h4",{id:"parameters-10"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"[number, number, number number]")),(0,a.kt)("li",{parentName:"ul"},"Array with 4 numbers, the two first are the top left position of the rectangle and the two remaining are the size of the line.")))),(0,a.kt)("h4",{id:"return-12"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," The rectangle."),(0,a.kt)("h4",{id:"example-12"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const rectangle = Rectangle.fromArray([10, 10, 10, 10]);\n")))}m.isMDXComponent=!0}}]);