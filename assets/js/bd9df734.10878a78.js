"use strict";(self.webpackChunkr_row_doc=self.webpackChunkr_row_doc||[]).push([[540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=l.createContext({}),u=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=u(e.components);return l.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=u(n),k=a,d=m["".concat(o,".").concat(k)]||m[k]||c[k]||i;return n?l.createElement(d,r(r({ref:t},s),{},{components:n})):l.createElement(d,r({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:a,r[1]=p;for(var u=2;u<i;u++)r[u]=n[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var l=n(7462),a=(n(7294),n(3905));const i={id:"Point",slug:"point"},r=void 0,p={unversionedId:"class/primitives/Point",id:"class/primitives/Point",title:"Point",description:"The Point class represents a Point in 2D space.",source:"@site/docs/class/primitives/point.md",sourceDirName:"class/primitives",slug:"/class/primitives/point",permalink:"/r-row-doc/class/primitives/point",draft:!1,tags:[],version:"current",frontMatter:{id:"Point",slug:"point"},sidebar:"tutorialSidebar",previous:{title:"Line",permalink:"/r-row-doc/class/primitives/line"},next:{title:"Rectangle",permalink:"/r-row-doc/class/primitives/rectangle"}},o={},u=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:2},{value:"setOptions",id:"setoptions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example",id:"example",level:4},{value:"toArray",id:"toarray",level:3},{value:"Return",id:"return-1",level:4},{value:"Example",id:"example-1",level:4},{value:"add",id:"add",level:3},{value:"Return",id:"return-2",level:4},{value:"Example",id:"example-2",level:4},{value:"subtract",id:"subtract",level:3},{value:"Return",id:"return-3",level:4},{value:"Example",id:"example-3",level:4},{value:"multiply",id:"multiply",level:3},{value:"Return",id:"return-4",level:4},{value:"Example",id:"example-4",level:4},{value:"divide",id:"divide",level:3},{value:"Return",id:"return-5",level:4},{value:"Example",id:"example-5",level:4},{value:"equals",id:"equals",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return",id:"return-6",level:4},{value:"Example",id:"example-6",level:4},{value:"getDistanceWithPoint",id:"getdistancewithpoint",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Return",id:"return-7",level:4},{value:"Example",id:"example-7",level:4},{value:"isOnLine",id:"isonline",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Return",id:"return-8",level:4},{value:"Example",id:"example-8",level:4},{value:"isOnRectangle",id:"isonrectangle",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return",id:"return-9",level:4},{value:"Example",id:"example-9",level:4},{value:"isInRectangle",id:"isinrectangle",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Return",id:"return-10",level:4},{value:"Example",id:"example-10",level:4},{value:"isOnCircle",id:"isoncircle",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Return",id:"return-11",level:4},{value:"Example",id:"example-11",level:4},{value:"isInCircle",id:"isincircle",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Return",id:"return-12",level:4},{value:"Example",id:"example-12",level:4},{value:"clone",id:"clone",level:3},{value:"Return",id:"return-13",level:4},{value:"Example",id:"example-13",level:4},{value:"draw",id:"draw",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Return",id:"return-14",level:4},{value:"Example",id:"example-14",level:4},{value:"Static methods",id:"static-methods",level:2},{value:"fromArray",id:"fromarray",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Return",id:"return-15",level:4},{value:"Example",id:"example-15",level:4}],s={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Point")," class represents a Point in 2D space."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"constructor(x: number, y: number, options: PointOptions = {})\n")),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"x")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"The x coordinate."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"y")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"The y coordinate."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"PointOptions")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")),(0,a.kt)("li",{parentName:"ul"},"The options for the Point")))),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"setoptions"},"setOptions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"setOptions(options: PointOptions): Point\n")),(0,a.kt)("p",null,"Set the options of the point."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"PointOptions")),(0,a.kt)("li",{parentName:"ul"},"The point options.")))),(0,a.kt)("h4",{id:"return"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The point with the new options."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\npoint.setOptions({ color: 'red', weight: 2 });\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"toarray"},"toArray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"toArray(): [number, number]\n")),(0,a.kt)("p",null,"Converts a point to an array."),(0,a.kt)("h4",{id:"return-1"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[number, number]")," Array with 2 numbers, the first is the x coordinate of the point and the second is the y coordinate of the point."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst arr = point.toArray();\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"add"},"add"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"add(point: Point): Point\n")),(0,a.kt)("p",null,"Addition with another point."),(0,a.kt)("h4",{id:"return-2"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The result of the addition."),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point1 = new Point(10, 10);\nconst point2 = new Point(10, 10);\nconst result = point1.add(point2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"subtract"},"subtract"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"subtract(point: Point): Point\n")),(0,a.kt)("p",null,"Subtraction with another point."),(0,a.kt)("h4",{id:"return-3"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The result of the subtraction."),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point1 = new Point(10, 10);\nconst point2 = new Point(10, 10);\nconst result = point1.subtract(point2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"multiply"},"multiply"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"multiply(point: Point): Point\n")),(0,a.kt)("p",null,"Multiplication with another point."),(0,a.kt)("h4",{id:"return-4"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The result of the multiplication."),(0,a.kt)("h4",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point1 = new Point(10, 10);\nconst point2 = new Point(10, 10);\nconst result = point1.multiply(point2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"divide"},"divide"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"divide(point: Point): Point\n")),(0,a.kt)("p",null,"Division with another point."),(0,a.kt)("h4",{id:"return-5"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The result of the division."),(0,a.kt)("h4",{id:"example-5"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point1 = new Point(10, 10);\nconst point2 = new Point(10, 10);\nconst result = point1.divide(point2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"equals"},"equals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"equals(point: Point): boolean\n")),(0,a.kt)("p",null,"Checks if the point is equal to another point."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"point"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The point to compare with")))),(0,a.kt)("h4",{id:"return-6"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the points are equal."),(0,a.kt)("h4",{id:"example-6"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point1 = new Point(10, 10);\nconst point2 = new Point(10, 10);\nconst result = point1.equals(point2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getdistancewithpoint"},"getDistanceWithPoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getDistanceWithPoint(point: Point): number\n")),(0,a.kt)("p",null,"Get the distance between two points."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"point"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The point to calculate the distance to.")))),(0,a.kt)("h4",{id:"return-7"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"number")," The distance between the two points."),(0,a.kt)("h4",{id:"example-7"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point1 = new Point(10, 10);\nconst point2 = new Point(20, 20);\nconst result = point1.getDistanceWithPoint(point2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isonline"},"isOnLine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isOnLine(line: Line, tolerance: number = 0.1): boolean\n")),(0,a.kt)("p",null,"Check if the point is on a line."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"line")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},"The line to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance of the check")))),(0,a.kt)("h4",{id:"return-8"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the point is on the line."),(0,a.kt)("h4",{id:"example-8"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst line = new Line(new Point(0, 0), new Point(20, 20));\nconst result = point.isOnLine(line);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isonrectangle"},"isOnRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isOnRectangle(rectangle: Rectangle): boolean\n")),(0,a.kt)("p",null,"Check if the point is on a rectangle."),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-9"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the point is on the rectangle."),(0,a.kt)("h4",{id:"example-9"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst rectangle = new Rectangle(new Point(0, 0), new Point(20, 20));\nconst result = point.isOnRectangle(rectangle);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isinrectangle"},"isInRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isInRectangle(rectangle: Rectangle): boolean\n")),(0,a.kt)("p",null,"Check if the point is in a rectangle."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-10"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the point is in the rectangle."),(0,a.kt)("h4",{id:"example-10"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst rectangle = new Rectangle(new Point(0, 0), new Point(20, 20));\nconst result = point.isInRectangle(rectangle);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isoncircle"},"isOnCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isOnCircle(circle: Circle, tolerance: number = 0.1): Point[]\n")),(0,a.kt)("p",null,"Check if the point is on a circle."),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"circle")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance of the check.")))),(0,a.kt)("h4",{id:"return-11"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the point is on the circle."),(0,a.kt)("h4",{id:"example-11"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst circle = new Circle(new Point(0, 0), 10);\nconst result = point.isOnCircle(circle);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isincircle"},"isInCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isInCircle(circle: Circle, tolerance: number = 0.1): boolean\n")),(0,a.kt)("p",null,"Check if the point is in a circle."),(0,a.kt)("h4",{id:"parameters-7"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"circle")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance of the check.")))),(0,a.kt)("h4",{id:"return-12"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the point is in the circle."),(0,a.kt)("h4",{id:"example-12"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst circle = new Circle(new Point(0, 0), 10);\nconst result = point.isInCircle(circle);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"clone"},"clone"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"clone(): Point\n")),(0,a.kt)("p",null,"Get a copy of point."),(0,a.kt)("h4",{id:"return-13"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The copy."),(0,a.kt)("h4",{id:"example-13"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\nconst copy = point.clone();\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"draw"},"draw"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"draw(ctx: CanvasRenderingContext2D): void\n")),(0,a.kt)("p",null,"Draw the Point."),(0,a.kt)("h4",{id:"parameters-8"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctx"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"CanvasRenderingContext2D")),(0,a.kt)("li",{parentName:"ul"},"The canvas context.")))),(0,a.kt)("h4",{id:"return-14"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"void")),(0,a.kt)("h4",{id:"example-14"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = new Point(10, 10);\npoint.draw(ctx);\n")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"static-methods"},"Static methods"),(0,a.kt)("h3",{id:"fromarray"},"fromArray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"static fromArray(array: [number, number]): Point\n")),(0,a.kt)("p",null,"Creates a point from an array"),(0,a.kt)("h4",{id:"parameters-9"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"[number number]")),(0,a.kt)("li",{parentName:"ul"},"Array with 2 numbers, the first is x coordinate of the point and the second is the y coordinate of the point.")))),(0,a.kt)("h4",{id:"return-15"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point")," The point."),(0,a.kt)("h4",{id:"example-15"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const point = Point.fromArray([10, 10]);\n")))}c.isMDXComponent=!0}}]);