"use strict";(self.webpackChunkr_row_doc=self.webpackChunkr_row_doc||[]).push([[1156],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,b=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return r?n.createElement(b,o(o({ref:t},u),{},{components:r})):n.createElement(b,o({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6894:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const l={id:"GameLoop",slug:"game-loop"},o=void 0,i={unversionedId:"class/GameLoop",id:"class/GameLoop",title:"GameLoop",description:"The GameLoop class is a singleton that handles the game loop. It manages update and render subscribers, as well as calculating the delta time and frame rate.",source:"@site/docs/class/game-loop.md",sourceDirName:"class",slug:"/class/game-loop",permalink:"/r-row-doc/class/game-loop",draft:!1,tags:[],version:"current",frontMatter:{id:"GameLoop",slug:"game-loop"},sidebar:"tutorialSidebar",previous:{title:"GameCanvas",permalink:"/r-row-doc/class/game-canvas"},next:{title:"SceneManager",permalink:"/r-row-doc/class/scene-manager"}},s={},p=[{value:"Getters",id:"getters",level:2},{value:"instance",id:"instance",level:3},{value:"FPS",id:"fps",level:3},{value:"Methods",id:"methods",level:2},{value:"setFreezeLimit",id:"setfreezelimit",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example",id:"example",level:4},{value:"subscribeToUpdate",id:"subscribetoupdate",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return",id:"return-1",level:4},{value:"Example",id:"example-1",level:4},{value:"unsubscribeFromUpdate",id:"unsubscribefromupdate",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Return",id:"return-2",level:4},{value:"Example",id:"example-2",level:4},{value:"subscribeToPreRender",id:"subscribetoprerender",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Return",id:"return-3",level:4},{value:"Example",id:"example-3",level:4},{value:"unsubscribeFromPreRender",id:"unsubscribefromprerender",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return",id:"return-4",level:4},{value:"Example",id:"example-4",level:4},{value:"subscribeToPostRender",id:"subscribetopostrender",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Return",id:"return-5",level:4},{value:"Example",id:"example-5",level:4},{value:"unsubscribeFromPostRender",id:"unsubscribefrompostrender",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Return",id:"return-6",level:4},{value:"Example",id:"example-6",level:4}],u={toc:p},m="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," class is a singleton that handles the game loop. It manages update and render subscribers, as well as calculating the delta time and frame rate."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Prefer to get the unique instance of this service from the ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceContainer")," like:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const gameLoop = ServiceContainer.gameLoop;\n"))),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"getters"},"Getters"),(0,a.kt)("h3",{id:"instance"},"instance"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"GameLoop"))),(0,a.kt)("p",null,"Returns the singleton instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," class."),(0,a.kt)("h3",{id:"fps"},"FPS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"Returns the current frames per second (FPS) as a number."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"setfreezelimit"},"setFreezeLimit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"setFreezeLimit(limit: number): GameLoop\n")),(0,a.kt)("p",null,"Sets the freeze limit in seconds."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"limit"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"The freeze limit in seconds")))),(0,a.kt)("h4",{id:"return"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ServiceContainer.GameLoop.setFreezeLimit(0.1);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"subscribetoupdate"},"subscribeToUpdate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"subscribeToUpdate(subscriber: UpdateFunction): GameLoop\n")),(0,a.kt)("p",null,"Subscribes a function to the update loop."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscriber"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"UpdateFunction")),(0,a.kt)("li",{parentName:"ul"},"The function to subscribe")))),(0,a.kt)("h4",{id:"return-1"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ServiceContainer.GameLoop.subscribeToUpdate((deltaTime) => {\n  console.log(`deltaTime: ${deltaTime}`);\n});\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"unsubscribefromupdate"},"unsubscribeFromUpdate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"unsubscribeFromUpdate(subscriber: UpdateFunction): GameLoop\n")),(0,a.kt)("p",null,"Unsubscribes a function from the update loop."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscriber"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"UpdateFunction")),(0,a.kt)("li",{parentName:"ul"},"The function to unsubscribe")))),(0,a.kt)("h4",{id:"return-2"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const updateFunction = (deltaTime) => {\n  console.log(`deltaTime: ${deltaTime}`);\n};\nconst gameLoop = ServiceContainer.GameLoop;\ngameLoop.subscribeToUpdate(updateFunction);\n//...\ngameLoop.unsubscribeFromUpdate(updateFunction);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"subscribetoprerender"},"subscribeToPreRender"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"subscribeToPreRender(subscriber: DrawFunction): GameLoop\n")),(0,a.kt)("p",null,"Subscribes a function to the pre-render loop."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscriber"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"DrawFunction")),(0,a.kt)("li",{parentName:"ul"},"The function to subscribe")))),(0,a.kt)("h4",{id:"return-3"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ServiceContainer.GameLoop.subscribeToPreRender((ctx) => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n});\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"unsubscribefromprerender"},"unsubscribeFromPreRender"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"unsubscribeFromPreRender(subscriber: DrawFunction): GameLoop\n")),(0,a.kt)("p",null,"Unsubscribes a function to the pre-render loop."),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscriber"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"DrawFunction")),(0,a.kt)("li",{parentName:"ul"},"The function to unsubscribe")))),(0,a.kt)("h4",{id:"return-4"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const preRenderFunction = (ctx) => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n};\nconst gameLoop = ServiceContainer.GameLoop;\ngameLoop.subscribeToPreRender(preRenderFunction);\n//...\ngameLoop.unsubscribeFromPreRender(preRenderFunction);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"subscribetopostrender"},"subscribeToPostRender"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"subscribeToPostRender(subscriber: DrawFunction): GameLoop\n")),(0,a.kt)("p",null,"Subscribes a function to the post-render loop."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscriber"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"DrawFunction")),(0,a.kt)("li",{parentName:"ul"},"The function to subscribe")))),(0,a.kt)("h4",{id:"return-5"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example-5"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ServiceContainer.GameLoop.subscribeToPostRender((ctx) => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n});\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"unsubscribefrompostrender"},"unsubscribeFromPostRender"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"unsubscribeFromPostRender(subscriber: DrawFunction): GameLoop\n")),(0,a.kt)("p",null,"Unsubscribes a function from the post-render loop."),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscriber"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"DrawFunction")),(0,a.kt)("li",{parentName:"ul"},"The function to unsubscribe")))),(0,a.kt)("h4",{id:"return-6"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"GameLoop")," The instance of the GameLoop class."),(0,a.kt)("h4",{id:"example-6"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const postRenderFunction = (ctx) => {\n  ctx.fillStyle = 'red';\n  ctx.fillRect(0, 0, 100, 100);\n};\nconst gameLoop = ServiceContainer.GameLoop;\ngameLoop.subscribeToPostRender(postRenderFunction);\n//...\ngameLoop.unsubscribeFromPostRender(postRenderFunction);\n")))}c.isMDXComponent=!0}}]);