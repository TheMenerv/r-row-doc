"use strict";(self.webpackChunkr_row_doc=self.webpackChunkr_row_doc||[]).push([[8373],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=l.createContext({}),s=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return l.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),k=a,d=m["".concat(o,".").concat(k)]||m[k]||c[k]||i;return n?l.createElement(d,r(r({ref:t},u),{},{components:n})):l.createElement(d,r({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:a,r[1]=p;for(var s=2;s<i;s++)r[s]=n[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},914:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var l=n(7462),a=(n(7294),n(3905));const i={id:"Line",slug:"line"},r=void 0,p={unversionedId:"class/primitives/Line",id:"class/primitives/Line",title:"Line",description:"The Line class represents a Line in 2D space.",source:"@site/docs/class/primitives/line.md",sourceDirName:"class/primitives",slug:"/class/primitives/line",permalink:"/r-row-doc/class/primitives/line",draft:!1,tags:[],version:"current",frontMatter:{id:"Line",slug:"line"},sidebar:"tutorialSidebar",previous:{title:"Circle",permalink:"/r-row-doc/class/primitives/circle"},next:{title:"Point",permalink:"/r-row-doc/class/primitives/point"}},o={},s=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:3},{value:"Getters",id:"getters",level:2},{value:"length",id:"length",level:3},{value:"center",id:"center",level:3},{value:"angle",id:"angle",level:3},{value:"Methods",id:"methods",level:2},{value:"setOptions",id:"setoptions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return",id:"return",level:4},{value:"Example",id:"example",level:4},{value:"toArray",id:"toarray",level:3},{value:"Return",id:"return-1",level:4},{value:"Example",id:"example-1",level:4},{value:"equals",id:"equals",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return",id:"return-2",level:4},{value:"Example",id:"example-2",level:4},{value:"isContainsPoint",id:"iscontainspoint",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Return",id:"return-3",level:4},{value:"Example",id:"example-3",level:4},{value:"isIntersectsWithLine",id:"isintersectswithline",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Return",id:"return-4",level:4},{value:"Example",id:"example-4",level:4},{value:"getIntersectionsWithLine",id:"getintersectionswithline",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Return",id:"return-5",level:4},{value:"Example",id:"example-5",level:4},{value:"isIntersectsWithRectangle",id:"isintersectswithrectangle",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Return",id:"return-6",level:4},{value:"Example",id:"example-6",level:4},{value:"getIntersectionsWithRectangle",id:"getintersectionswithrectangle",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Return",id:"return-7",level:4},{value:"Example",id:"example-7",level:4},{value:"isInRectangle",id:"isinrectangle",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Return",id:"return-8",level:4},{value:"Example",id:"example-8",level:4},{value:"isIntersectsWithCircle",id:"isintersectswithcircle",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Return",id:"return-9",level:4},{value:"Example",id:"example-9",level:4},{value:"getIntersectionsWithCircle",id:"getintersectionswithcircle",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Return",id:"return-10",level:4},{value:"Example",id:"example-10",level:4},{value:"isInCircle",id:"isincircle",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Return",id:"return-11",level:4},{value:"Example",id:"example-11",level:4},{value:"clone",id:"clone",level:3},{value:"Return",id:"return-12",level:4},{value:"Example",id:"example-12",level:4},{value:"draw",id:"draw",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Return",id:"return-13",level:4},{value:"Example",id:"example-13",level:4},{value:"Static methods",id:"static-methods",level:2},{value:"fromArray",id:"fromarray",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Return",id:"return-14",level:4},{value:"Example",id:"example-14",level:4}],u={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Line")," class represents a Line in 2D space."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"constructor(start: Point, end: Point, options: LineOptions = {})\n")),(0,a.kt)("h3",{id:"properties"},"Properties"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"start")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The start point of the line."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"end")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The end point of the line."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"LineOptions")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")),(0,a.kt)("li",{parentName:"ul"},"The options for the line")))),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"getters"},"Getters"),(0,a.kt)("h3",{id:"length"},"length"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"The length of the line."),(0,a.kt)("h3",{id:"center"},"center"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point"))),(0,a.kt)("p",null,"The center of the line."),(0,a.kt)("h3",{id:"angle"},"angle"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number"))),(0,a.kt)("p",null,"The angle of the line."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"setoptions"},"setOptions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"setOptions(options: LineOptions): Circle\n")),(0,a.kt)("p",null,"Set the options of the line."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"LineOptions")),(0,a.kt)("li",{parentName:"ul"},"The circle options.")))),(0,a.kt)("h4",{id:"return"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Line")," The line with the new options."),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(/* ... */);\nline.setOptions({ color: 'red', weight: 2 });\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"toarray"},"toArray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"toArray(): [number, number, number, number]\n")),(0,a.kt)("p",null,"Converts a line to an array."),(0,a.kt)("h4",{id:"return-1"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[number, number, number, number]")," Array with 4 numbers, the two first are the start position of the line and the two remaining are the end position of the line."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst array = line.toArray();\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"equals"},"equals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"equals(line: Line): boolean\n")),(0,a.kt)("p",null,"Checks if the line is equal to another line."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"line"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},"The line to compare with")))),(0,a.kt)("h4",{id:"return-2"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the lines are equal."),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line1 = new Line(new Point(10, 10), new Point(20, 20));\nconst line2 = new Line(new Point(10, 10), new Point(20, 20));\nconst line3 = new Line(new Point(10, 10), new Point(20, 30));\nline1.equals(line2); // true\nline1.equals(line3); // false\nline2.equals(line3); // false\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"iscontainspoint"},"isContainsPoint"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isContainsPoint(point: Point, tolerance: number = 0.1): boolean\n")),(0,a.kt)("p",null,"Checks if the line contains a point."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"point")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Point")),(0,a.kt)("li",{parentName:"ul"},"The point to check"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance to use")))),(0,a.kt)("h4",{id:"return-3"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the line contains the point."),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nline.isContainsPoint(new Point(15, 15)); // true\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isintersectswithline"},"isIntersectsWithLine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithLine(line: Line, tolerance: number = 0.1): boolean\n")),(0,a.kt)("p",null,"Checks if the line intersects with another line."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"line")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},"The line to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance to use")))),(0,a.kt)("h4",{id:"return-4"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the lines intersect."),(0,a.kt)("h4",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line1 = new Line(new Point(10, 10), new Point(20, 20));\nconst line2 = new Line(new Point(10, 20), new Point(20, 10));\nline1.isIntersectsWithLine(line2); // true\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getintersectionswithline"},"getIntersectionsWithLine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithLine(line: Line, tolerance: number = 0.1): Point[]\n")),(0,a.kt)("p",null,"Get the intersections with another line"),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"line")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},"The line to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")," (optional)"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance to use.")))),(0,a.kt)("h4",{id:"return-5"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersections."),(0,a.kt)("h4",{id:"example-5"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line1 = new Line(new Point(10, 10), new Point(20, 20));\nconst line2 = new Line(new Point(10, 20), new Point(20, 10));\nconst intersections = line1.getIntersectionsWithLine(line2);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isintersectswithrectangle"},"isIntersectsWithRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithRectangle(rectangle: Rectangle): boolean\n")),(0,a.kt)("p",null,"Check if the line intersects with a rectangle."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-6"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the line intersects with the rectangle."),(0,a.kt)("h4",{id:"example-6"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst rectangle = new Rectangle(new Point(10, 20), new Point(20, 10));\nline.isIntersectsWithRectangle(rectangle); // true\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getintersectionswithrectangle"},"getIntersectionsWithRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithRectangle(rectangle: Rectangle): Point[]\n")),(0,a.kt)("p",null,"Get the intersection point of the line with a rectangle."),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-7"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point[]")," The intersection points."),(0,a.kt)("h4",{id:"example-7"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst rectangle = new Rectangle(new Point(10, 20), new Point(20, 10));\nconst points = line.getIntersectionsWithRectangle(rectangle);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isinrectangle"},"isInRectangle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isInRectangle(rectangle: Rectangle): boolean\n")),(0,a.kt)("p",null,"Check if the line is in a rectangle."),(0,a.kt)("h4",{id:"parameters-7"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rectangle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Rectangle")),(0,a.kt)("li",{parentName:"ul"},"The rectangle to check.")))),(0,a.kt)("h4",{id:"return-8"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the line is in the rectangle."),(0,a.kt)("h4",{id:"example-8"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst rectangle = new Rectangle(new Point(10, 20), new Point(20, 10));\nline.isInRectangle(rectangle); // true\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isintersectswithcircle"},"isIntersectsWithCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isIntersectsWithCircle(circle: Circle, tolerance: number = 0.1): boolean\n")),(0,a.kt)("p",null,"Check if the line intersects with a circle."),(0,a.kt)("h4",{id:"parameters-8"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"circle")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance to use.")))),(0,a.kt)("h4",{id:"return-9"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," Whether the line intersects with the circle."),(0,a.kt)("h4",{id:"example-9"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst circle = new Circle(new Point(15, 15), 5);\nline.isIntersectsWithCircle(circle); // true\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getintersectionswithcircle"},"getIntersectionsWithCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"getIntersectionsWithCircle(circle: Circle, tolerance: number = 0.1): Point | null\n")),(0,a.kt)("p",null,"Get the intersection point of the line with a circle."),(0,a.kt)("h4",{id:"parameters-9"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"circle")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"number")),(0,a.kt)("li",{parentName:"ul"},"Default value: ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1")),(0,a.kt)("li",{parentName:"ul"},"The tolerance to use.")))),(0,a.kt)("h4",{id:"return-10"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point | null")," The intersection point or null if the line doesn't intersect with the circle."),(0,a.kt)("h4",{id:"example-10"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst circle = new Circle(new Point(15, 15), 5);\nconst point = line.getPointFromIntersectsWithCircle(circle);\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"isincircle"},"isInCircle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"isInCircle(circle: Circle): boolean\n")),(0,a.kt)("p",null,"Check if the line is in a circle"),(0,a.kt)("h4",{id:"parameters-10"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"circle"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle")),(0,a.kt)("li",{parentName:"ul"},"The circle to check.")))),(0,a.kt)("h4",{id:"return-11"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Point | null")," Whether the line is in the circle."),(0,a.kt)("h4",{id:"example-11"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst circle = new Circle(new Point(15, 15), 5);\nline.isInCircle(circle); // true\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"clone"},"clone"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"clone(): Line\n")),(0,a.kt)("p",null,"Get a copy of line."),(0,a.kt)("h4",{id:"return-12"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Line")," The copy."),(0,a.kt)("h4",{id:"example-12"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nconst line2 = line.clone();\n")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"draw"},"draw"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"draw(ctx: CanvasRenderingContext2D): void\n")),(0,a.kt)("p",null,"Draw the Line."),(0,a.kt)("h4",{id:"parameters-11"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctx"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"CanvasRenderingContext2D")),(0,a.kt)("li",{parentName:"ul"},"The canvas context.")))),(0,a.kt)("h4",{id:"return-13"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"void")),(0,a.kt)("h4",{id:"example-13"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = new Line(new Point(10, 10), new Point(20, 20));\nline.draw(ctx);\n")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"static-methods"},"Static methods"),(0,a.kt)("h3",{id:"fromarray"},"fromArray"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="prototype"',title:'"prototype"'},"static fromArray(array: [number, number, number, number]): Line\n")),(0,a.kt)("p",null,"Creates a line from an array"),(0,a.kt)("h4",{id:"parameters-12"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"array"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Type: ",(0,a.kt)("inlineCode",{parentName:"li"},"[number, number, number number]")),(0,a.kt)("li",{parentName:"ul"},"Array with 4 numbers, the two first are the start position of the line and the two remaining are the end position of the line.")))),(0,a.kt)("h4",{id:"return-14"},"Return"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Line")," The line."),(0,a.kt)("h4",{id:"example-14"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const line = Line.fromArray([10, 10, 20, 20]);\n")))}c.isMDXComponent=!0}}]);